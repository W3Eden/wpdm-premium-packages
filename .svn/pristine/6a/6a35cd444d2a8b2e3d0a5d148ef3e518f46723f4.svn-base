<?php
namespace WPDMPP\Libs;

if (!defined('ABSPATH')) {
    exit;
}

class CustomActions {

    function __construct()
    {

    }

    function execute(){
        add_action('wp_ajax_delete_renew_entry', array($this, 'deleteRenewEntry'));
    }

    /**
     * @usage Updates Payment Status
     */
    function updatePS(){
        global $wpdb;
        if(!current_user_can(WPDMPP_MENU_ACCESS_CAP)) return;

        $wpdb->update("{$wpdb->prefix}ahm_orders",array('payment_status'=> sanitize_text_field($_POST['status']) ),array('order_id'=> sanitize_text_field( $_POST['order_id']) ) );
        die(__('Payment status updated',"wpdm-premium-packages"));
    }

    /**
     * @usage Updates Order Status
     */
    function updateOS(){
        global $wpdb;
        if(!current_user_can(WPDMPP_MENU_ACCESS_CAP)) return;

        $status = sanitize_text_field($_POST['status']);
        $order_id = sanitize_text_field($_POST['order_id']);

        $settings = maybe_unserialize(get_option('_wpdmpp_settings'));

        $update_data = array();

        if($status == 'Renew'){
            //$status = 'Completed';
            //$update_data['payment_status'] = 'Completed';
            //$update_data['expire_date'] = strtotime("+".$settings['order_validity_period']." days");
            $order = new \WPDMPP\Libs\Order($order_id);
            \WPDMPP\Libs\Order::renewOrder($order_id, $order->trans_id, false);
            die(__('Order Renewed Successfully!',"wpdm-premium-packages"));
        }

        $update_data['order_status'] = $status;

        $wpdb->update("{$wpdb->prefix}ahm_orders", $update_data,array('order_id'=>$order_id));

        //Let the customer of that order know about order status change
        $siteurl = home_url("/");
        $order = $wpdb->get_row("select * from {$wpdb->prefix}ahm_orders where order_id='".$order_id."'");
        $user_info = get_userdata($order->uid);
        $admin_email = get_bloginfo("admin_email");
        $email = array();
        $subject = "Order Status Changed";

        $message = "The order <strong>{$order_id}</strong> is changed to <strong>{$status}</strong>"."\n Customer Name is ".$user_info->user_firstname." ".$user_info->lastname."\n Email is ".$user_info->user_email;
        $email['subject'] = $subject;
        $email['body'] = $message;
        $email['headers'] = 'From:  <'.$admin_email.'>' . "\r\n";

        $logo = isset($settings['logo_url'])&&$settings['logo_url']!=""?"<img src='{$settings['logo_url']}' alt='".get_bloginfo('name')."'/>":get_bloginfo('name');

        $email = apply_filters("order_status_change_email", $email);
        //wp_mail($user_info->user_email,$email['subject'],$email['body'],$email['headers']);
        $params = array(
            'date' => date(get_option('date_format'),time()),
            'homeurl' => home_url('/'),
            'sitename' => get_bloginfo('name'),
            'order_link' => "<a href='".wpdmpp_orders_page('id='.$order_id)."'>".wpdmpp_orders_page('id='.$order_id)."</a>",
            'to_email' => $user_info->user_email,
            'orderid' => $order_id,
            'order_url' => wpdmpp_orders_page('id='.$order_id),
            'order_status' => $status,
            'order_url_admin' => admin_url('edit.php?post_type=wpdmpro&page=orders&task=vieworder&id='.$order_id),
            'img_logo' => $logo
        );

        \WPDM\Email::send("os-notification", $params);
        die(__('Order status updated',"wpdm-premium-packages"));
    }

    /**
     * @usage Payment for Order
     * @param array $post_data
     */
    function payNow($post_data = array()){
        global $wpdb, $current_user;
        if(count($post_data) == 0) $post_data = wpdmpp_sanitize_array($_POST);
        
        $order = new \WPDMPP\Libs\Order();
        $corder = $order->GetOrder(sanitize_text_field($post_data['order_id']));
        $payment = new \WPDMPP\Libs\Payment();
        wpdmpp_empty_cart();
        $_SESSION['orderid'] = $corder->order_id;

        if(!isset($post_data['payment_method']) || $post_data['payment_method'] == '')
            $post_data['payment_method'] = $corder->payment_method;

        $payment->InitiateProcessor(sanitize_text_field($post_data['payment_method']));
        $payment->Processor->OrderTitle = 'Order# '.$corder->order_id;

        if($corder->order_status == 'Expired')
            $payment->Processor->InvoiceNo = $corder->order_id."_renew_".date("Ymd");
        else
            $payment->Processor->InvoiceNo = $corder->order_id;

        $payment->Processor->Custom = $corder->order_id;
        $payment->Processor->Amount = number_format($corder->total,2,".","");

        //echo $payment->Processor->InvoiceNo;die();
        //$payment->Processor->Amount = wpdmpp_get_cart_total();

        echo $payment->Processor->ShowPaymentForm(1);
    }

    /**
     * Add Order Note ( Called through wpdmpp_ajax_call function )
     */
    function addNote(){
        global $wpdb;
        $id = sanitize_text_field($_REQUEST['order_id']);
        $data = array('note' => sanitize_text_field( $_REQUEST['note'] ) );
        if(isset($_REQUEST['admin'])) $data['admin'] = 1;
        if(isset($_REQUEST['seller'])) $data['seller'] = 1;
        if(isset($_REQUEST['customer'])) $data['customer'] = 1;
        if(isset($_REQUEST['file'])) $data['file'] = sanitize_text_field($_REQUEST['file']);

        if(\WPDMPP\Libs\Order::add_note($id, $data)) {

            $copy = array();
            if(isset($data['admin'])) $copy[] = '<input type=checkbox checked=checked disabled=disabled /> Admin &nbsp; ';
            if(isset($data['seller'])) $copy[] = '<input type=checkbox checked=checked disabled=disabled /> Seller &nbsp; ';
            if(isset($data['customer'])) $copy[] = '<input type=checkbox checked=checked disabled=disabled /> Customer &nbsp; ';
            $copy = implode("", $copy);
            ?>

            <div class="panel panel-default">
                <div class="panel-body">
                    <?php $note = wpautop(strip_tags(stripcslashes($data['note']),"<a><strong><b><img>")); echo preg_replace('/((http|ftp|https):\/\/[\w-]+(\.[\w-]+)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?)/', '<a target="_blank" href="\1">\1</a>', $note); ?>
                </div>
                <?php if(isset($_REQUEST['file'])){ ?>
                    <div class="panel-footer text-right">
                        <?php foreach($_REQUEST['file'] as $file){ ?>
                            <a href="#" style="margin-left: 10px"><i class="fa fa-paperclip"></i> <?php echo esc_attr($file); ?></a> &nbsp;
                        <?php } ?>
                    </div>
                <?php } ?>
                <div class="panel-footer text-right"><small><em><i class="fa fa-clock-o"></i> <?php echo date(get_option('date_format') . " h:i", time()); ?></em></small>
                    <div class="pull-left"><small><em><?php if($copy!='') echo "Copy sent to ".$copy; ?></em></small></div>
                </div>
            </div>
        <?php }
        else
            echo "error";
    }

    /**
     * Verify License key
     */
    function verifyLicense(){
        global $wpdb, $wpdmpp_setting;
        $wpdmpp_setting = get_option("_wpdmpp_settings");
        $key = esc_sql($_POST['key']);
        $domain = esc_sql($_POST['domain']);
        $data = $wpdb->get_row("select l.*,o.uid,o.payment_status,o.order_status, o.expire_date as order_expire_date from {$wpdb->prefix}ahm_licenses l,{$wpdb->prefix}ahm_orders o where l.licenseno='$key' and l.oid=o.order_id and o.order_status IN ('Completed','Expired')",ARRAY_A);

        if(!$data)
            die('invalid');

        if($data['order_expire_date'] == 0)
            $data['order_expire_date'] = $data['date'] + ($wpdmpp_setting['order_validity_period']*24*3600);

        if($data['order_expire_date'] < time()) $data['order_status'] = 'Expired';

        if($data['order_status'] === 'Expired' && !isset($wpdmpp_setting['license_key_validity']))
            die('invalid');


        if($data['domain'] == ''){
            $domain = serialize(array($domain));
            $dt = time();
            $copy = get_post_meta($data['pid'],'__wpdm_license_usage_limit', true);
            if(!$copy) $copy = 1;
            $wpdb->query("update {$wpdb->prefix}ahm_licenses set domain = '{$domain}',activation_date='{$dt}', domain_limit='$copy' where licenseno='$key'");
            die('valid');
        }
        elseif((@in_array($domain,@maybe_unserialize($data['domain']))||$domain==$data['domain']))
            die('valid');
        elseif(count(unserialize($data['domain']))<$data['domain_limit']&&!in_array($domain,@unserialize($data['domain']))){
            $data['domain'] = unserialize($data['domain']);
            $data['domain'][] = $domain;
            $domain = serialize($data['domain']);
            $wpdb->query("update {$wpdb->prefix}ahm_licenses set domain = '{$domain}' where licenseno='$key'");
            die('valid');
        }
        else
            die('invalid');
    }

    /**
     * Saves current cart
     */
    function saveCart(){
        $cartdata = wpdmpp_get_cart_data();
        $cartdata = \WPDM\libs\Crypt::Encrypt($cartdata);
        $id = uniqid();
        file_put_contents(WPDM_CACHE_DIR.'saved-cart-'.$id.'.txt', $cartdata);
        echo $id;
        die();
    }

    /**
     * Email the current cart link to the provided email address
     */
    function emailCart(){
        if(isset($_REQUEST['email']) && isset($_REQUEST['carturl'])){
            if(!is_email($_REQUEST['email'])) return;

            $params = array(
                'date'      => date(get_option('date_format'),time()),
                'homeurl'   => home_url('/'),
                'sitename'  => get_bloginfo('name'),
                'to_email'  => sanitize_email($_REQUEST['email']),
                'carturl'   => esc_url($_REQUEST['carturl'])
            );

            \WPDM\Email::send("email-saved-cart", $params);

            do_action("wpdm_pp_emailed_cart", esc_url($_REQUEST['carturl']));

            die('sent');
        }
    }

    function deleteRenewEntry(){
        if(wp_verify_nonce(wpdm_query_var('_dre', 'txt'), NONCE_KEY) && current_user_can(WPDM_ADMIN_CAP)){
           global $wpdb;
           $wpdb->delete("{$wpdb->prefix}ahm_order_renews", array('ID' => wpdm_query_var('id', 'int')));
           $this->dieJson(array('msg' => 'Deleted', 'success' => 1));
        }
    }

    function dieJson($array){
        header('Content-type: application/json');
        echo json_encode($array);
        die();
    }
}

$customActions = new CustomActions();
$customActions->execute();